#!/usr/bin/ruby
# -*- coding: utf-8 -*-
require 'uri'
require 'open-uri'
require 'json'
require 'pp'
require 'net/http'
require 'net/https'
require 'yaml'
require 'tempfile'

class Git
  class Config
    def initialize(config_hash, path)
      @config = config_hash
      @path = path
    end
    attr_reader :config

    def has_key?(key)
      @config.has_key?(key) || @config.has_key?(key.to_s)
    end

    def []=(*args)
      assignment(args[0], args[1])
    end
    def [](key)
      key = key.to_s if key.class == Symbol
      method_missing(key)
    end
    def method_missing(name, *args)
      name = name.to_s
      is_assignment = create_if_nil = false
      if name[-1..-1] == '=' then
        is_assignment = true
        name.slice! -1
      end
      if name[-1..-1] == '_' then
        create_if_nil = true
        name.slice! -1
      end

      return assignment(name, args[0]) if is_assignment

      config_object = get_config_object(@path+[name.to_s])
      return nil if config_object.config.empty? and not create_if_nil

      if config_object.config.class == Hash then
        config_object
      else
        config_object.config
      end
    end

    private
    def get_config_object(path)
      return @@config_objects[path] if @@config_objects.has_key? path

      if @config.has_key? path[-1] then
        @@config_objects[path] = Config::new(@config[path[-1]], path)
      else
        @config[path[-1]] = {}
        @@config_objects[path] = Config::new({}, path)
      end
    end

    def Config::init
      @@config_objects = {[] => Config::parse_config}
      @@config_objects[[]]
    end

    def Config::parse_config
      config_hash = {}
      get_by_regexp('".*"').each do |path,value|
        subconfig = config_hash
        elems = path.split '.'
        elems[0..-2].each do |path|
          subconfig[path] = {} if subconfig[path].nil?
          subconfig = subconfig[path]
        end
        subconfig[elems[-1]] = value
      end
      Config::new(config_hash, [])
    end

    def Config::get_by_regexp(regex)
      %x(git config --get-regexp #{regex}).split(/\n/).map do |line|
        line.match(/(.+?) (.*)/)[1..2]
      end
    end

    def Config::set(name, value)
      %x(git config #{name} "#{value}")
    end

    def assignment(key, value)
      Config::set("#{@path.join('.')}.#{key}", value)
    end
  end
      
  def initialize
    @config = Config::init
  end
  attr_reader :config

  def branch
    %x(git branch -l | grep "*" | cut -d " " -f 2).strip
  end

  def ticket_id
    $1 if branch =~ %r!id/(\d+)!
  end
end

class Redmine
  class ConfigError < StandardError; end

  def initialize(git)
    @root    = git.config.redmine.url
    @key     = git.config.redmine.apikey
    @project = git.config.redmine.project

    unless @root and @key and @project
      raise ConfigError.new
    end
  end

  def tickets
    api("issues", :project_id => @project)['issues']
  end

  def summary(id)
    issue = api("issues/#{id}", :include => "journals")["issue"]
    "\##{issue['id']} #{issue['subject']}"
  end

  def info(id)
    issue = api("issues/#{id}", :include => "journals")["issue"]
    body = <<-END
     ID: #{issue['id']}
Subject: #{issue['subject']}
 Author: #{issue['author']['name']}
   Date: #{issue['updated_on']}
    END

    unless issue['description'].empty?
      body << "\n"
      body << issue['description']
    end

    unless issue['journals'].empty?
      body << "\n\nnotes:\n"

      issue['journals'].each_with_index do |journal, i|
        unless journal['notes'] == ''
          body << <<-END
##{i+1}:
#{journal['notes']}
          END
        end
      end
    end

    body
  end

  def create(title)
    post('issues', {}, {
           :issue => {
             :project_id => @project,
             :subject => title,
           }}.to_json)
  end

  def api(path, params = {})
    params[:key] = @key if @key
    url = URI(@root+"/") + ("./#{path}.json?" + params.map{|key,value| "#{key}=#{value}" }.join("&"))

    begin
      open(url) do |io|
        JSON.parse(io.read)
      end
    rescue => e
      puts "cannot access: #{url}"
      raise e
    end
  end

  def post(path, params, data)
    url = URI(@root+"/") + "./#{path}.json?"

    http = Net::HTTP.new(url.host, url.port)
    http.use_ssl = url.scheme == 'https'

    http.start do
      ret = http.post(url.path,data, {
                        "X-Redmine-API-Key" => @key,
                        "Content-Type" => "application/json"
                      })
      case ret
      when Net::HTTPSuccess
      else
        raise "error: #{ret}"
      end
    end
  end
end

class Github
  class ConfigError < StandardError; end

  API_URL_ROOT = "https://api.github.com/"

  def initialize(git)
    @url = git.config.github.url
    unless @url
      raise ConfigError.new
    end
  end

  def tickets
    api("issues").map do |issue|
      {
        'id' => issue['number'],
        'subject' => issue['title'],
        'status' => {'name' => issue['state']}
      }
    end
  end

  def summary(id)
    issue = api("issues/#{id}")
    "\##{issue['number']} #{issue['title']}"
  end

  def info(id)
    issue = api("issues/#{id}")
    body = <<-END
     ID: #{issue['number']}
Subject: #{issue['title']}
 Author: #{issue['user']['login']}
   Date: #{issue['updated_at']}
    END

    unless issue['body'].empty?
      body << "\n"
      body << issue['body']
    end

    comments = api("issues/#{id}/comments")
    unless comments.nil?
      body << "\n\nnotes:\n"

      comments.each_with_index do |comment, i|
        unless comment['body'] == ''
          body << <<-END
##{i+1}:
#{comment['body']}
          END
        end
      end
      body
    end

    body
  end

  def create(title)
    # TODO
  end

  def api(api_name, params = {})
    api_uri = URI(API_URL_ROOT) + "./repos/" + ("./" + URI(@url).path)
    url = api_uri + ("./#{api_name}?" + params.map{|key,value| "#{key}=#{value}" }.join("&"))
    begin
      open(url) {|io| JSON.parse(io.read)}
    rescue => e
      puts "cannot access: #{url}"
      raise e
    end
  end
end

class GitConfigITS
  class ConfigError < StandardError; end

  def initialize(git)
    @git = git
  end
  
  def tickets
    lastTicketNo = @git.config.ticket.ticketno.to_i
    (1...lastTicketNo).map do |id|
      data = @git.config.ticket["id/#{id}"]
      {'id' => id, 'subject' => data.subject, 'status' => {'name' => data.status}}
    end
  end

  def summary(id)
  end

  def info(id)
    data = @git.config.ticket["id/#{id}_"]
    body = <<-END
     ID: #{id}
Subject: #{data.subject}
 Author: #{data.author}
   Date: #{data.date}
    END
    unless data.description.nil? or data.description.empty? then
      body += "\n" + data.description
    end
    body
  end

  def create(title = "")
    ticketFormat = <<END
Subject: #{title}
Author: #{@git.config.user.name}
Date: #{Time.now}
Status: new
Description: |-
  
END

    editTempFile(ticketFormat) do |f, modified|
      return if not modified and title.empty?

      ticket = @git.config.ticket
      ticketNo = (ticket.ticketno || "1").to_i

      YAML.load_documents(f) do |yaml|
        yaml.each do |key, value|
          ticket["id/#{ticketNo}_"][key] = value
        end
      end
      ticket.ticketno = (ticketNo+1).to_s
    end
  end

  def edit(id)
  end

  private
  def editTempFile(initialString, &proc)
    tmp = Tempfile.new("tmp")
    tmp.write initialString
    tmp.close

    editor = @git.config.core_.editor || ENV["EDITOR"]
    system "#{editor} #{tmp.path}"
    File.open(tmp.path) do |f|
      modified = f.read != initialString
      f.rewind
      proc.call(f, modified)
    end
    tmp.unlink
  end
end

class GitTicket
  def initialize(git, its)
    @git = git
    @its = its
  end

  def cmd_list
    @its.tickets.each do|ticket|
      puts "#{ticket['id']} #{ticket['subject']} [#{ticket['status']['name']}]"
    end
  end

  def cmd_summary(id = @git.ticket_id)
    puts @its.summary(id)
  end

  def cmd_info(id = @git.ticket_id)
    puts @its.info(id)
  end

  def cmd_switch(id)
    branch = "id/#{id}"
    unless system "git checkout #{branch}" then
      system "git checkout -b #{branch}"
    end
    puts "Switch to topic branch: #{@its.summary(id)}"
  end

  def cmd_edit(id)
    puts @its.edit(id)
  end

  def cmd_create(title)
    @its.create title
  end

  def default(args)
    if args.empty?
      case @git.branch
      when %r!id/(\d+)!
        cmd_info
      else
        cmd_list
      end
    else
      cmd_switch(*args)
    end
  end
end

git = Git.new
begin
  case git.config.ticket_.its
  when 'redmine'
    its = Redmine.new git
  when 'github'
    its = Github.new git
  when 'local'
    its = GitConfigITS.new git
  else
    its = Redmine.new git
  end
  git_ticket = GitTicket.new git, its

  cmd = "cmd_#{ARGV.first}".to_sym
  if git_ticket.respond_to? cmd then
    git_ticket.send cmd, *ARGV[1..-1]
  else
    git_ticket.default(ARGV)
  end
rescue
  STDERR.puts <<END
# # # This repository is not configured. Please set redmine information.

git config redmine.url http://example.com/Redmine
git config redmine.apikey some_api_key
git config redmine.project project_name
END
  exit 1
end

